var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
(function(global, factory) {
  typeof exports === "object" && typeof module !== "undefined" ? factory(exports, require("@tinacms/sharedctx"), require("react")) : typeof define === "function" && define.amd ? define(["exports", "@tinacms/sharedctx", "react"], factory) : (global = typeof globalThis !== "undefined" ? globalThis : global || self, factory(global.tinacms = {}, global.NOOP, global.NOOP));
})(this, function(exports2, sharedctx, React) {
  "use strict";
  function _interopDefaultLegacy(e) {
    return e && typeof e === "object" && "default" in e ? e : { "default": e };
  }
  var React__default = /* @__PURE__ */ _interopDefaultLegacy(React);
  const TinaEditProvider = (_a) => {
    var _b = _a, {
      showEditButton
    } = _b, props = __objRest(_b, [
      "showEditButton"
    ]);
    return /* @__PURE__ */ React__default["default"].createElement(sharedctx.EditProvider, null, showEditButton && /* @__PURE__ */ React__default["default"].createElement(ToggleButton, null), /* @__PURE__ */ React__default["default"].createElement(TinaEditProviderInner, __spreadValues({}, props)));
  };
  const ToggleButton = () => {
    const { edit } = sharedctx.useEditState();
    const [isOnAdmin, setIsOnAdmin] = React__default["default"].useState(false);
    React__default["default"].useEffect(() => {
      var _a;
      if (window) {
        if ((_a = window.location) == null ? void 0 : _a.pathname.startsWith("/admin")) {
          setIsOnAdmin(true);
        }
      }
    }, [setIsOnAdmin]);
    return edit || isOnAdmin ? null : /* @__PURE__ */ React__default["default"].createElement("div", {
      style: { position: "fixed", bottom: "56px", left: "0px", zIndex: 200 }
    }, /* @__PURE__ */ React__default["default"].createElement("a", {
      href: "/admin",
      style: {
        borderRadius: "0 50px 50px 0",
        fontSize: "16px",
        fontFamily: "Inter, 'Helvetica Neue', 'Arial Nova', Helvetica, Arial, sans-serif",
        fontWeight: "bold",
        textDecoration: "none",
        background: "rgb(34, 150, 254)",
        boxShadow: "0px 1px 3px rgb(0 0 0 / 10%), 0px 2px 6px rgb(0 0 0 / 20%)",
        color: "white",
        padding: "14px 20px",
        border: "none"
      }
    }, "Edit with Tina"));
  };
  const TinaEditProviderInner = ({ children, editMode }) => {
    const { edit } = sharedctx.useEditState();
    if (edit) {
      return editMode;
    }
    return children;
  };
  Object.defineProperty(exports2, "isEditing", {
    enumerable: true,
    get: function() {
      return sharedctx.isEditing;
    }
  });
  Object.defineProperty(exports2, "setEditing", {
    enumerable: true,
    get: function() {
      return sharedctx.setEditing;
    }
  });
  Object.defineProperty(exports2, "useEditState", {
    enumerable: true,
    get: function() {
      return sharedctx.useEditState;
    }
  });
  exports2.TinaEditProvider = TinaEditProvider;
  Object.defineProperty(exports2, "__esModule", { value: true });
  exports2[Symbol.toStringTag] = "Module";
});
